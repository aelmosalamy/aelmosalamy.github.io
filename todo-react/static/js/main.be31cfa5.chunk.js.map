{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","key","id","onClick","className","content","AddTodo","props","state","handleChange","bind","handleSubmit","event","console","log","this","setState","target","value","preventDefault","addTodo","onSubmit","type","onChange","for","React","Component","App","Math","floor","random","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAuBeA,EArBD,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WACfC,EAAWF,EAAMG,OACrBH,EAAMI,KAAI,SAAAC,GACR,OAEE,uBAAGC,IAAKD,EAAKE,GAAIC,QAAS,WAAOP,EAAWI,EAAKE,KAAME,UAAU,6CAC9DJ,EAAKK,YAKZ,uBAAGD,UAAU,UAAb,0BAGF,OACE,yBAAKA,UAAU,oBACZP,ICoBQS,E,kDAnCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXH,QAAS,IAEX,EAAKI,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBANH,E,yDASNE,GACXC,QAAQC,IAAIC,KAAKP,OACjBO,KAAKC,SAAS,CAACX,QAASO,EAAMK,OAAOC,U,mCAG1BN,GACXA,EAAMO,iBACNN,QAAQC,IAAIC,KAAKP,OAEjBO,KAAKR,MAAMa,QAAQL,KAAKP,OAExBO,KAAKC,SAAS,CAACX,QAAS,O,+BAIvB,OACE,6BACE,0BAAMgB,SAAUN,KAAKJ,cACnB,2BAAOT,GAAG,aAAaE,UAAU,4BAA4BkB,KAAK,OAAOJ,MAAOH,KAAKP,MAAMH,QAASkB,SAAUR,KAAKN,eACnH,2BAAOe,IAAI,cAAX,sB,GA7BWC,IAAMC,WC+CbC,E,kDA5Cb,aAAe,IAAD,8BACZ,gBACKnB,MAAQ,CACXb,MAAO,CACL,CAACO,GAAI,EAAGG,QAAS,iBACjB,CAACH,GAAI,EAAGG,QAAS,sBAIrB,EAAKe,QAAU,EAAKA,QAAQV,KAAb,gBACf,EAAKd,WAAa,EAAKA,WAAWc,KAAhB,gBAVN,E,oDAaNV,GAENA,EAAKE,GAAK0B,KAAKC,MAAsB,IAAhBD,KAAKE,UAE1B,IAAInC,EAAK,sBAAOoB,KAAKP,MAAMb,OAAlB,CAAyBK,IAClCe,KAAKC,SACH,CAACrB,Y,iCAIMO,GACT,IAAMP,EAAQoB,KAAKP,MAAMb,MAAMoC,QAAO,SAAA/B,GACpC,OAAOA,EAAKE,KAAOA,KAGrBa,KAAKC,SAAS,CACZrB,Y,+BAKF,OACE,yBAAKS,UAAU,sBACb,wBAAIA,UAAU,oCAAd,SACA,kBAAC,EAAD,CAAOT,MAAOoB,KAAKP,MAAMb,MAAOC,WAAYmB,KAAKnB,aACjD,kBAAC,EAAD,CAASwB,QAASL,KAAKK,e,GAvCbK,IAAMC,WCQJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.be31cfa5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Todos = ({todos, deleteTodo}) => {\r\n  const todoList = todos.length ? (\r\n    todos.map(todo => {\r\n      return (\r\n        // eslint-disable-next-line\r\n        <a key={todo.id} onClick={() => {deleteTodo(todo.id)}} className=\"collection-item deep-purple-text darken-2\">\r\n          {todo.content}\r\n        </a>\r\n      )\r\n    })\r\n  ) : (\r\n    <p className=\"center\">You have no todos left</p>\r\n  )\r\n\r\n  return (\r\n    <div className=\"todos collection\">\r\n      {todoList}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Todos","import React from 'react'\r\n\r\nclass AddTodo extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      content: ''\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n\r\n  handleChange(event) {\r\n    console.log(this.state)\r\n    this.setState({content: event.target.value})\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault()\r\n    console.log(this.state)\r\n    // Calling parent method to update parent state using the content\r\n    this.props.addTodo(this.state)\r\n    // Clearing text in the input\r\n    this.setState({content: ''})  \r\n  }\r\n\r\n  render() {\r\n     return (\r\n       <div>\r\n         <form onSubmit={this.handleSubmit}>\r\n           <input id=\"todo-input\" className=\"deep-purple-text darken-2\" type=\"text\" value={this.state.content} onChange={this.handleChange} />\r\n           <label for=\"todo-input\">Add new item</label>\r\n         </form>\r\n       </div>\r\n     )\r\n  }\r\n}\r\n\r\nexport default AddTodo","import React from 'react';\nimport  Todos from './Todos'\nimport AddTodo from './AddTodo'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      todos: [\n        {id: 1, content: 'buy some milk'},\n        {id: 2, content: 'play video games'}\n      ]\n    }\n\n    this.addTodo = this.addTodo.bind(this)\n    this.deleteTodo = this.deleteTodo.bind(this)\n  }\n\n  addTodo(todo) {\n    // Generating a random id\n    todo.id = Math.floor(Math.random() * 10000)\n    // Concatenating the new todo\n    let todos = [...this.state.todos, todo]\n    this.setState(\n      {todos}\n      )\n  }\n\n  deleteTodo(id) {\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id\n    });\n\n    this.setState({\n      todos\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"todo-App container\">\n        <h1 className=\"center deep-purple-text darken-2\">Todos</h1>\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n        <AddTodo addTodo={this.addTodo}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}