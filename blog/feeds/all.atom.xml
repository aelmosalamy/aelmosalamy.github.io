<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>aelmosalamy</title><link href="https://aelmosalamy.github.io/" rel="alternate"></link><link href="https://aelmosalamy.github.io%5Cfeeds/all.atom.xml" rel="self"></link><id>https://aelmosalamy.github.io/</id><updated>2019-03-01T13:26:00+00:00</updated><entry><title>Say Hello with Flask!</title><link href="https://aelmosalamy.github.io%5Csay-hello-with-flask/" rel="alternate"></link><published>2019-03-01T13:26:00+00:00</published><updated>2019-03-01T13:26:00+00:00</updated><author><name>aelmosalamy</name></author><id>tag:aelmosalamy.github.io\say-hello-with-flask,2019-03-01:/</id><summary type="html">&lt;p&gt;In this post, I am going to introduce you to an interesting Python framework…&lt;/p&gt;
&lt;p&gt;The popular web development microframework: Flask.&lt;/p&gt;
&lt;p&gt;A framework basically controls how your code is built and deployed. A framework isn’t a library. Your code calls library functions and methods; on the other hand, A framework …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post, I am going to introduce you to an interesting Python framework…&lt;/p&gt;
&lt;p&gt;The popular web development microframework: Flask.&lt;/p&gt;
&lt;p&gt;A framework basically controls how your code is built and deployed. A framework isn’t a library. Your code calls library functions and methods; on the other hand, A framework calls your code and deploys it.&lt;/p&gt;
&lt;p&gt;Flask is called a &lt;strong&gt;microframework&lt;/strong&gt; because it is considered low-level compared to other web frameworks like Django; Flask provides you with the core functions and its up to you how you combine them together to create larger applications, This makes Flask very versatile and extensible.&lt;/p&gt;
&lt;p&gt;A web framework is a framework used for web-based projects. Later, you will see how we can write our application, and then run it using Flask, which will build our application and deploy it to a local web server.&lt;/p&gt;
&lt;p&gt;We are going to write a simple &lt;code&gt;Hello, world!&lt;/code&gt; web application and gradually add features to it, as we cover the core principles of Flask in the process.&lt;/p&gt;
&lt;p&gt;First let’s install Flask; In a new terminal window, type the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install flask
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now check if everything is fine and working as expected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; flask --version
&lt;span class="go"&gt;Flask 1.0.2&lt;/span&gt;
&lt;span class="go"&gt;Python 3.6.6 (v3.6.6:4cf1f54eb7, Jun 27 2018, 03:37:03) [MSC v.1900 64 bit (AMD64)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see a message like the one shown above.
Now I will create a new Python file, I will call it &lt;code&gt;my-app.py&lt;/code&gt; and I will add the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Hello, world!"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This might look quite unusual, so let’s break this down:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At line 1 we imported the flask module, specifically a class called &lt;code&gt;Flask&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;At line 3 we instantiated that class passing the &lt;code&gt;__name__&lt;/code&gt; constant which refers to the module name, creating an object called &lt;code&gt;app&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;At line 6 we defined a simple function, &lt;code&gt;index&lt;/code&gt;, that takes no arguments and returns a typical “Hello, world!” string.&lt;/li&gt;
&lt;li&gt;At line 5 we have what we call a &lt;strong&gt;function decorator&lt;/strong&gt;, decorators modify and extend their underlying functions, in this case our &lt;code&gt;@app.route("/")&lt;/code&gt; decorator causes our &lt;code&gt;index&lt;/code&gt; function to be called when the “/” route is viewed, “/” in any filesystem resembles the root; we are going to see this in action soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now I will switch back my terminal and type the following:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure you are in the same directory where your app resides while executing all terminal commands.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;my-app.py
&lt;span class="gp"&gt;$&lt;/span&gt; flask run
&lt;span class="go"&gt; * Serving Flask app "my-app.py"&lt;/span&gt;
&lt;span class="go"&gt; * Environment: production&lt;/span&gt;
&lt;span class="go"&gt;   WARNING: Do not use the development server in a production environment.&lt;/span&gt;
&lt;span class="go"&gt;   Use a production WSGI server instead.&lt;/span&gt;
&lt;span class="go"&gt; * Debug mode: off&lt;/span&gt;
&lt;span class="go"&gt; * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We used &lt;code&gt;export&lt;/code&gt; to set the environmental variable &lt;code&gt;FLASK_APP&lt;/code&gt; to our application’s name, &lt;code&gt;my-app.py&lt;/code&gt;, now when we use &lt;code&gt;flask run&lt;/code&gt;, Flask looks at the &lt;code&gt;FLASK_APP&lt;/code&gt; environmental variable and runs our app.&lt;/p&gt;
&lt;p&gt;You should see a line saying that our app is running at &lt;code&gt;http://127.0.0.1:5000/&lt;/code&gt;.
&lt;code&gt;127.0.0.1&lt;/code&gt; is the &lt;code&gt;localhost&lt;/code&gt; which refers to my own computer - since the web server is running on my computer - and 5000 is the port on which my app is running at; Now open your browser and type in “127.0.0.1:5000” and you should see it, beautiful and neatly printed: Hello, world!
Notice that Flask works with pure &lt;span class="caps"&gt;HTML&lt;/span&gt; code, so instead of returning &lt;code&gt;Hello, world!&lt;/code&gt; in our index function, we can return &lt;code&gt;&amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;&lt;/code&gt;, now restart the server, reload the page and you should see Hello, world! as a nice &lt;span class="caps"&gt;HTML&lt;/span&gt; headline.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&lt;h1&gt;Hello, world!&lt;/h1&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Additionally, Flask is serving our application at hostname &lt;code&gt;127.0.0.1:5000&lt;/code&gt;, Flask works by returning different &lt;span class="caps"&gt;HTML&lt;/span&gt; pages to the viewer based on the route its on, for simplicity, let say you are visiting a webpages “http://foo.com/bar”, behind the scenes you are sending a &lt;strong&gt;request&lt;/strong&gt; to the server, demanding &lt;code&gt;/bar&lt;/code&gt;, the server looks at their files and returns &lt;code&gt;/bar&lt;/code&gt; to you, Flask - client-side framework - does the same, it executes Python functions based on whatever route you are visiting, then it returns a pure static &lt;span class="caps"&gt;HTML&lt;/span&gt; document to the user.&lt;/p&gt;
&lt;p&gt;To further illustrate the idea of routes, try to open &lt;code&gt;127.0.0.1:5000/blah&lt;/code&gt; and you will be stopped by a &lt;strong&gt;Not Found&lt;/strong&gt; error message, this is because Flask returns Hello, world! only at route “/” not “/blah”.&lt;/p&gt;
&lt;p&gt;Let’s create another route to clarify that concept. In your &lt;code&gt;my-app.py&lt;/code&gt; file add the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/&amp;lt;name&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;h1&amp;gt;Hello, {}!&amp;lt;/h1&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This technique is called a &lt;strong&gt;Dynamic &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/strong&gt;, at Line 1 we specified a variable, &lt;code&gt;name&lt;/code&gt;, between angle brackets, this variable which is a part of the &lt;span class="caps"&gt;URL&lt;/span&gt; address is then passed to our &lt;code&gt;hello&lt;/code&gt; function and returned as a capitalized word inside a &lt;span class="caps"&gt;HTML&lt;/span&gt; tag, how simple!&lt;/p&gt;
&lt;p&gt;Now restart the server and add &lt;code&gt;/pop&lt;/code&gt; to your &lt;span class="caps"&gt;URL&lt;/span&gt;, you should see a &lt;code&gt;Hello, Pop!&lt;/code&gt; headline, experiment with different names and notice how the page’s content changes based on the route, this is especially useful when you want to create a customized experience for each user, you might have &lt;code&gt;/login/Adham&lt;/code&gt; that displays &lt;code&gt;Adham&lt;/code&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;s profile based on the route your using.&lt;/p&gt;
&lt;p&gt;I will be writing a second post about Flask soon, It would be really appreciated if you leave me a reaction or a comment below, Thanks for sticking around. Stay tuned!&lt;/p&gt;</content><category term="python"></category><category term="flask"></category><category term="web"></category></entry><entry><title>Python List Comprehensions!</title><link href="https://aelmosalamy.github.io%5Cpython-list-comprehensions/" rel="alternate"></link><published>2019-01-07T08:58:00+00:00</published><updated>2019-01-07T08:58:00+00:00</updated><author><name>Adham Elmosalamy</name></author><id>tag:aelmosalamy.github.io\python-list-comprehensions,2019-01-07:/</id><summary type="html">&lt;p&gt;What’s up everybody! In this post I am going to show you an interesting tip which I rarely see young Pythonistas use, it’s &lt;strong&gt;List Comprehensions&lt;/strong&gt;. If you dabbled a little with Python you probably had some problems where you had to iterate over a list and perform functions …&lt;/p&gt;</summary><content type="html">&lt;p&gt;What’s up everybody! In this post I am going to show you an interesting tip which I rarely see young Pythonistas use, it’s &lt;strong&gt;List Comprehensions&lt;/strong&gt;. If you dabbled a little with Python you probably had some problems where you had to iterate over a list and perform functions to its elements on-the-run, I know. I make no sense. To clear things up let me start with a simple task. Given a list of numbers, return a list containing the squares of the original list’s numbers, You might think: &lt;em&gt;“Well, That’s easy!”&lt;/em&gt; and write something as the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;              &lt;span class="c1"&gt;# Empty list for storing numbers &lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="c1"&gt;# Iterate over all numbers&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Self-explanatory&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;            &lt;span class="c1"&gt;# Look previous comment&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now if we run it..&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Output: [1, 4, 9, 16, 25, 36, 49]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It works as expected; however, It took around 7 lines to implement and execute, and since Python is built for simplicity, we’ve got a more &lt;em&gt;Pythonic&lt;/em&gt; way to do this.&lt;/p&gt;
&lt;h2&gt;The One Liner&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# Output: [1, 4, 9, 16, 25, 36, 49]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Magnificent, right? This is one of the simplest forms of a Python list comprehension, we iterate over each element in the list: &lt;code&gt;for x in numbers&lt;/code&gt;, then apply some operations on element &lt;code&gt;x&lt;/code&gt; and in our case we used &lt;code&gt;x * x&lt;/code&gt; to get the square and finally we placed the whole expression inside square brackets &lt;code&gt;[]&lt;/code&gt; to indicate that we want the final output in the form of a &lt;em&gt;List&lt;/em&gt;. and all of this in just one line.&lt;/p&gt;
&lt;p&gt;Let’s get a bit more advanced, we can apply our comprehension selectively, ignoring all even numbers for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This one is exactly like the previous one except for a little addition. We iterated over the elements in a list: &lt;code&gt;for x in numbers&lt;/code&gt; and we applied a specific operation to that &lt;code&gt;x&lt;/code&gt; every iteration which is &lt;code&gt;x * x&lt;/code&gt;; however, we told Python to do that only if a specific condition is met which is &lt;code&gt;x % 2 != 0&lt;/code&gt; which translate to &lt;em&gt;if x is not even&lt;/em&gt; in simple English, What I like most about this is how natural it is written, You don’t need much to get used to it, since it is written in logical order. That last sentence can be translated like this: &lt;em&gt;Give me the square of “x” for every “x” in this list of numbers only if that “x” is not even.&lt;/em&gt; How much closer to English can this get? Finally, I would like to show you a 2 more examples of Python comprehensions.&lt;/p&gt;
&lt;p&gt;You can use the exact same syntax as so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'apple'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sandwich'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'almond'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;shopping_cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'apple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'almond'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'apple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'sandwich'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;total_cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;shopping_cart&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# Output: 28&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can even apply the exact same syntax with dictionaries, with &lt;code&gt;key:value&lt;/code&gt; pairs as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and there we go, we’ve created a &lt;em&gt;Dictionary Comprehension!&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Python Comprehensions are extremely powerful tool, easy to read syntax and I find myself using it alot, one practical example is scanning a list of employees, and updating the salary of each employee in a specific team by a percentage of his current salary, in just one line.&lt;/p&gt;
&lt;p&gt;That’s it for this post, hopefully you found it useful, just keep practicing and whenever you are solving any problem, think if there is a possibility that your problem can be solved using list comprehensions, that way you can adopt it and integrate into your current Python weapons. Peace.&lt;/p&gt;</content><category term="python"></category><category term="tips"></category></entry><entry><title>Linux into the scene!</title><link href="https://aelmosalamy.github.io%5Clinux-into-scene/" rel="alternate"></link><published>2018-11-30T09:38:00+00:00</published><updated>2018-11-30T09:38:00+00:00</updated><author><name>aelmosalamy</name></author><id>tag:aelmosalamy.github.io\linux-into-scene,2018-11-30:/</id><summary type="html">&lt;p&gt;Hello everyone,&lt;/p&gt;
&lt;p&gt;Recently, while watching a video, I came across a guy using Linux on his machine, It looked really clean and neat and I wanted to try it!&lt;/p&gt;
&lt;p&gt;At the start it just looked cool and I thought why not download it? It is free and open-source. I looked …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello everyone,&lt;/p&gt;
&lt;p&gt;Recently, while watching a video, I came across a guy using Linux on his machine, It looked really clean and neat and I wanted to try it!&lt;/p&gt;
&lt;p&gt;At the start it just looked cool and I thought why not download it? It is free and open-source. I looked up for Linux and found it have what is known as “distros”.&lt;/p&gt;
&lt;p&gt;Basically distros or distributions are a different variations of Linux, with every distro having its own look and settings - think of it as ice cream flavours - It can be different File manager or different interface, terminal and so on. I searched for the most popular distros - I wanted something solid with a big community - and I came across Ubuntu, a quick glance at its interface and I loved it instantly!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://2.bp.blogspot.com/-QrtlHOJq5lY/XAF1W3O8wzI/AAAAAAAAAMg/w3EyvrXavR4Lple-WstziOH9HzEjGB9fwCEwYBhgL/s1600/ubunto-logo-large.png"&gt;&lt;img alt="Ubuntu Logo" class="img-fluid" height="249" src="https://2.bp.blogspot.com/-QrtlHOJq5lY/XAF1W3O8wzI/AAAAAAAAAMg/w3EyvrXavR4Lple-WstziOH9HzEjGB9fwCEwYBhgL/s320/ubunto-logo-large.png" width="320"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So I went to the Ubuntu website and downloaded the latest &lt;span class="caps"&gt;LTS&lt;/span&gt; release, then…&lt;/p&gt;
&lt;p&gt;I didn’t know how to install it, I never installed an operating system myself. After some research, I realized I have to dual-boot - Installing two systems and become able to choose between them - Windows with Ubuntu, I wasn’t sure how to do that, I saw many videos and tutorials and it looked easy; however, I was kinda scared. scared I might mess something up and I end up with a corrupt disk, computer doesn’t boot properly, or anything you can imagine when you think of playing around with operating systems.&lt;/p&gt;
&lt;p&gt;Anyway, I decided to try and do it anyway, It changed from being just a personal preference to a must-do-this challenge. Now that I’ve done it, I can tell you it was pretty easy and straightforward, and it unlikely - If you follow the instructions - to mess anything up.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here is what I did to dual-boot Ubuntu with my Windows:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the &lt;span class="caps"&gt;ISO&lt;/span&gt; file for Ubuntu’s long-term-support release from their website.&lt;/li&gt;
&lt;li&gt;Use Windows’ Disk Management utility to partition my hard drive, I made a 800 GBs partition for my files and another 200 GBs empty partition for Ubuntu.&lt;/li&gt;
&lt;li&gt;Insert a &lt;span class="caps"&gt;USB&lt;/span&gt; Flash drive (The data on it will be deleted so make sure you don’t need them) and format it, make sure to use &lt;span class="caps"&gt;FAT32&lt;/span&gt; filesystem.&lt;/li&gt;
&lt;li&gt;Download &lt;a href="https://rufus.ie/en_IE.html"&gt;Rufus&lt;/a&gt;  and open it, give it your downloaded &lt;span class="caps"&gt;ISO&lt;/span&gt; file, specify your &lt;span class="caps"&gt;USB&lt;/span&gt; location and press “Start”, it will take 3-5 mins to create your Bootable &lt;span class="caps"&gt;USB&lt;/span&gt;, close Rufus when done.&lt;/li&gt;
&lt;li&gt;Open the “Change advanced startup options” on your Windows - on Windows 10, you can find it by searching “boot” - then click on “Restart” under “Advanced startup options” and select “Boot from &lt;span class="caps"&gt;USB&lt;/span&gt; …” option.&lt;/li&gt;
&lt;li&gt;After few seconds a black loading screen saying “Ubuntu” will appear and prompt you “Try Ubuntu” or “Install Ubuntu”, I recommend trying it so you can decide whether you like it - which is very likely - or you gonna think about it.&lt;/li&gt;
&lt;li&gt;If you are going to “Install Ubuntu” then you will run through a straightforward wizard setting up your partitions, setting your computer name, users, location and time, etc…&lt;/li&gt;
&lt;li&gt;Now you can use your new &lt;span class="caps"&gt;OS&lt;/span&gt;, every time you power up your computer a Boot Loader program called &lt;span class="caps"&gt;GRUB&lt;/span&gt; will give you choices you can then select either Ubuntu or Windows.&lt;/li&gt;
&lt;li&gt;Enjoy!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: You can access your Windows file from Ubuntu and not vice versa, Ubuntu supports the &lt;span class="caps"&gt;NTFS&lt;/span&gt; filesystem (The one Window’s use) while Windows need some special software so it can read the exFAT filesystem Ubuntu use (Another try by Microsoft to stay dominating I guess).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-Jgl2PO0ahJs/XAF1VlmKUVI/AAAAAAAAAMc/Cr52psesleQTigEojcPbClLa8bc6MfrGgCLcBGAs/s1600/desktop.png"&gt;&lt;img alt="Ubuntu's Desktop" class="img-fluid" src="https://1.bp.blogspot.com/-Jgl2PO0ahJs/XAF1VlmKUVI/AAAAAAAAAMc/Cr52psesleQTigEojcPbClLa8bc6MfrGgCLcBGAs/s640/desktop.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Customizing Ubuntu:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu and Linux generally are known for their versatility, theoretically you can customize everything in Linux, ranging as high as the graphical interface and as deep as your system’s kernel. There is plenty of beautiful themes available for download, one of my favorite themes is the &lt;em&gt;X Arc Dark&lt;/em&gt; which is part of the &lt;em&gt;X Arc Collection,&lt;/em&gt; you can download it &lt;a href="https://www.gnome-look.org/p/1167049/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You need to download the &lt;span class="caps"&gt;GNOME&lt;/span&gt; Tweaks tool which is found at Ubuntu’s Software Center, using this you will be able to change themes (You gotta search for yourself how to apply the &lt;em&gt;X Arc&lt;/em&gt; themes though, additionally this tool gives you many options to “tweak” and customize your system, surely it is a must-have.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Software:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu comes with a preinstalled office alternatives, LibreOffice, which is nothing fancy, it has all the necessary features you would expect from Word, Excel and Powerpoint.&lt;/p&gt;
&lt;p&gt;I downloaded the following free software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pinta instead of &lt;span class="caps"&gt;MS&lt;/span&gt; Paint&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;GIMP&lt;/span&gt; instead of Photoshop&lt;/li&gt;
&lt;li&gt;Inkscape instead of Illustrator&lt;/li&gt;
&lt;li&gt;Visual Studio Code&lt;/li&gt;
&lt;li&gt;Blender3D&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;VLC&lt;/span&gt; Media Player (is a must)&lt;/li&gt;
&lt;li&gt;Kazam screen-recorder (I was planning to record some tuts)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the basic, yet great &lt;span class="caps"&gt;FOSS&lt;/span&gt; bundle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I loved Ubuntu, it got that great look and feeling, it is solid and stable and you can customize everything to your liking, it was a great experience, I learned a lot just from the installation process.&lt;/p&gt;
&lt;p&gt;I was able to test &lt;span class="caps"&gt;ASCII&lt;/span&gt; Combat on &lt;span class="caps"&gt;UNIX&lt;/span&gt; systems (And fixed one little bug too) also I planning to get into is: Shell-scripting which is amazing if you want to get your hands dirty with servers, who knows maybe I can become a sysadmin? (Nah, just kidding :P).&lt;/p&gt;</content><category term="ubuntu"></category><category term="linux"></category></entry></feed>